// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/todo": {
            "get": {
                "description": "Get all todo list without any params required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todo"
                ],
                "summary": "Get all todos list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessTodosReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            },
            "put": {
                "description": "Update todo task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todo"
                ],
                "summary": "Update todo task",
                "parameters": [
                    {
                        "description": "Modify todo",
                        "name": "Task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessTodosReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new single todo task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todo"
                ],
                "summary": "Add new single todo task",
                "parameters": [
                    {
                        "description": "Add todo",
                        "name": "Task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessTodosReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            }
        },
        "/todo/{id}": {
            "delete": {
                "description": "Delete a todo task by task ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todo"
                ],
                "summary": "Delete a todo task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonDeleteTodosReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "description": "Update user data, \"salt\" should be empty",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user data",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserReqResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessUserReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new user, \"salt\" and \"id\" should be empty",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Add new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "NewUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserReqResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessUserReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Get token for authentication header [NOT IMPLEMENTED]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get login token",
                "parameters": [
                    {
                        "description": "Login details",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonSuccessLoginReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "delete": {
                "description": "Delete user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete user data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JsonDeleteUserReturn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.JsonBadRequestErrorReturn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.JsonInternalErrorReturn"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateTodoRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Clean all leftover comment and unnecessary code"
                },
                "due_date": {
                    "type": "string",
                    "example": "2021-12-30"
                },
                "id": {
                    "type": "integer"
                },
                "pic": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Clean up source code"
                }
            }
        },
        "model.CreateTodoResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Clean all leftover comment and unnecessary code"
                },
                "due_date": {
                    "type": "string",
                    "example": "2021-12-30"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "pic": {
                    "type": "string",
                    "example": "Bambang Prstoyo"
                },
                "status": {
                    "type": "string",
                    "example": "New"
                },
                "title": {
                    "type": "string",
                    "example": "Clean up source code"
                }
            }
        },
        "model.JsonBadRequestErrorReturn": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error to parse updated todos"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.JsonDeleteTodosReturn": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "todos": {
                    "type": "string",
                    "example": "nil"
                }
            }
        },
        "model.JsonDeleteUserReturn": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "model.JsonInternalErrorReturn": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error to get all todos"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.JsonSuccessLoginReturn": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzM3MzEwMzQsInVzZXJfaWQiOjQsInVzZXJfbmFtZSI6Ikpva28gQW51YXIzIn0.16vwI9kQQj7ER4yEoZDUezm-il3YZdBYr_XAoasWoj0"
                }
            }
        },
        "model.JsonSuccessTodosReturn": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CreateTodoResponse"
                    }
                }
            }
        },
        "model.JsonSuccessUserReturn": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserReqResponse"
                    }
                }
            }
        },
        "model.LoginInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "badu.naik.gajah@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "rahasiaIbuBADU"
                }
            }
        },
        "model.UserReqResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "surat@mail.com"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "example": "Ibu Badu"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "salt": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8088",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "TODO-TOGO a Todo API",
	Description: "This is an auto-generated API Docs.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
