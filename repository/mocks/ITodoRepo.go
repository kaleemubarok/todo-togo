// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	entity "todo-togo/entity"

	mock "github.com/stretchr/testify/mock"
)

// ITodoRepo is an autogenerated mock type for the ITodoRepo type
type ITodoRepo struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: todo
func (_m *ITodoRepo) CreateTodo(todo entity.Todo) (*entity.Todo, error) {
	ret := _m.Called(todo)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(entity.Todo) *entity.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: todo
func (_m *ITodoRepo) DeleteTodo(todo entity.Todo) error {
	ret := _m.Called(todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllTodo provides a mock function with given fields:
func (_m *ITodoRepo) SelectAllTodo() ([]*entity.Todo, error) {
	ret := _m.Called()

	var r0 []*entity.Todo
	if rf, ok := ret.Get(0).(func() []*entity.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTodo provides a mock function with given fields: todo
func (_m *ITodoRepo) SelectTodo(todo entity.Todo) (*entity.Todo, error) {
	ret := _m.Called(todo)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(entity.Todo) *entity.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: todo
func (_m *ITodoRepo) UpdateTodo(todo entity.Todo) (*entity.Todo, error) {
	ret := _m.Called(todo)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(entity.Todo) *entity.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
